services:
  web:
    build:
      context: ../..
      dockerfile: apps/web/Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ../../.env
    volumes:
      - ../../:/app
      - web_next:/app/apps/web/.next
      - /app/node_modules
      - /app/apps/web/node_modules
    working_dir: /app/apps/web
    command: sh -c "npm install && npm run dev"
    depends_on:
      - api
    networks:
      - app-network

  api:
    build:
      context: ../..
      dockerfile: apps/api/Dockerfile.dev
    ports:
      - "8787:8787"
    env_file:
      - ../../.env
    environment:
      - NODE_ENV=development
      - PORT=8787
      - DATA_DIR=/app/apps/api/data
      - TEMP_DIR=/app/apps/api/temp
      - STORAGE_DIR=/app/apps/api/storage
      - GCP_PROJECT_ID=one-to-multi-agent
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
      - DB_PORT=5432
    volumes:
      - ../../:/app
      - api_data:/app/apps/api/data
      - api_temp:/app/apps/api/temp
      - api_storage:/app/apps/api/storage
      - ../../gcp-service-account-key.json:/app/gcp-service-account-key.json:ro
      - /app/node_modules
      - /app/apps/api/node_modules
    working_dir: /app/apps/api
    command: sh -c "npm install && npm run dev"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Database (PostgreSQL for both development and production)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sql/04-add-user-tables.sql:/docker-entrypoint-initdb.d/01-add-user-tables.sql
      - ../sql/05-create-history-tables.sql:/docker-entrypoint-initdb.d/02-create-history-tables.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queuing and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - production

volumes:
  web_next:
  api_data:
  api_temp:
  api_storage:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
